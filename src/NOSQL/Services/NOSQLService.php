<?php
namespace NOSQL\Services;

use NOSQL\Dto\CollectionDto;
use NOSQL\Services\base\NOSQLBase;
use PSFS\base\Cache;
use PSFS\base\Logger;
use PSFS\base\Service;
use PSFS\base\Template;
use PSFS\base\types\helpers\GeneratorHelper;

/**
* Class NOSQLService
* @package NOSQL\Services
* @author Fran LÃ³pez <fran.lopez84@hotmail.es>
* @version 1.0
* Autogenerated service [2019-01-03 15:23:58]
*/
class NOSQLService extends Service {

    /**
     * @Injectable
     * @var \PSFS\base\Cache
     */
    protected $cache;

    /**
     * @var array
     */
    private $types = [];

    /**
     * @return array
     */
    public function getTypes()
    {
        return $this->types;
    }

    /**
     * @param array $types
     */
    public function setTypes($types)
    {
        $this->types = $types;
    }

    private function extractTypes() {
        $baseClass = new \ReflectionClass(NOSQLBase::class);
        if(null !== $baseClass) {
            $types = [];
            foreach($baseClass->getConstants() as $constant) {
                $types[] = $constant;
            }
            $this->setTypes($types);
        }
    }

    public function init()
    {
        parent::init();
        $this->extractTypes();
    }

    /**
     * @return array
     */
    public function getDomains() {
        $domains = [];
        $storedDomains = $this->cache->getDataFromFile(CONFIG_DIR . DIRECTORY_SEPARATOR . 'domains.json', Cache::JSON, TRUE);
        if(!empty($storedDomains)) {
            foreach($storedDomains as $domain => $data) {
                $domainLabel = str_replace(['@', '/'], '', $domain);
                if('ROOT' !== $domainLabel) {
                    $domains[] = $domainLabel;
                }
            }
        }
        return $domains;
    }

    /**
     * @param string $module
     * @return array
     */
    public function getCollections($module) {
        $collections = [];
        $schemaFilename = CORE_DIR . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'Config' . DIRECTORY_SEPARATOR . 'schema.json';
        if(file_exists($schemaFilename)) {
            $collections = $this->cache->getDataFromFile($schemaFilename, Cache::JSON, TRUE);
        }
        return $collections;
    }

    /**
     * @param string $module
     * @param array $collections
     * @throws \PSFS\base\exception\GeneratorException
     */
    public function setCollections($module, $collections) {
        $schemaFilename = CORE_DIR . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'Config' . DIRECTORY_SEPARATOR . 'schema.json';
        $this->cache->storeData($schemaFilename, $collections, Cache::JSON, true);
        $tpl = Template::getInstance();
        $tpl->addPath(__DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'Templates', 'NOSQL');
        $files = [
            '@NOSQL/generator/model.base.php.twig' => CORE_DIR . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'Models' . DIRECTORY_SEPARATOR . 'base',
            '@NOSQL/generator/model.php.twig' => CORE_DIR . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'Models',
            '@NOSQL/generator/api.php.twig' => CORE_DIR . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'Api'
        ];
        foreach($collections as $raw) {
            $collection = new CollectionDto(false);
            $collection->fromArray($raw);
            foreach($files as $template => $path) {
                GeneratorHelper::createDir($path);
                $templateDump = $tpl->dump($template, [
                    'domain' => $module,
                    'model' => $collection->name,
                ]);
                $this->writeTemplateToFile($templateDump, $path . DIRECTORY_SEPARATOR . $collection->name . '.php', false !== strpos($template, 'base'));
            }
        }
    }

    /**
     * @param string $fileContent
     * @param string $filename
     * @param bool $force
     * @return bool
     */
    private function writeTemplateToFile($fileContent, $filename, $force = false)
    {
        $created = false;
        if ($force || !file_exists($filename)) {
            try {
                $this->cache->storeData($filename, $fileContent, Cache::TEXT, true);
                $created = true;
            } catch (\Exception $e) {
                pre($e->getMessage());
                Logger::log($e->getMessage(), LOG_ERR);
            }
        } else {
            Logger::log($filename . t(' not exists or cant write'), LOG_ERR);
        }
        return $created;
    }
}
